# NOTE: update this with your service name
service: react-design-app-api

resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: ap-southeast-2

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: designs
    stripeSecretKey: ${file(../app.env):STRIPE_SECRET_KEY}
  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:ap-southeast-2:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /designs
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: functions/create.main
    events:
      - http:
          path: designs
          method: post
          cors: true
          authorizer: aws_iam
  # gets
  get:
    handler: functions/get.main
    events:
      - http:
          path: designs/{id}
          method: get
          cors: true
          authorizer: aws_iam
  # lists
  list:
    handler: functions/list.main
    events:
      - http:
          path: designs
          method: get
          cors: true
          authoriser: aws_iam
  # update
  update:
    handler: functions/update.main
    events:
      - http:
          path: designs/{id}
          method: put
          cors: true
          authoriser: aws_iam
  # delete
  delete:
    handler: functions/delete.main
    events:
      - http:
          path: designs/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  # billing
  billing:
    handler: functions/billing.main
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam

